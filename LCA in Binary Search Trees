class Solution {
public:
    vector<TreeNode*> obtainPath(TreeNode* root,TreeNode* p, vector<TreeNode*>p1)
    {
        p1.push_back(root);
        if(root->val==p->val)
        return p1;
        if(root->val>p->val)
           return obtainPath(root->left,p,p1);
        else
            return obtainPath(root->right,p,p1);
    
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
vector<TreeNode*>p2,p1;
        p1=obtainPath(root,p,p1);
       
        p2=obtainPath(root,q,p2);
        
        for(int i=0;i<min(p1.size(),p2.size());i++)
        {
            
            if(p1[i]->val!=p2[i]->val)
            {
               
                return p1[i-1];
            }
            
        }
        if(p1.size()<p2.size())
        return p1[p1.size()-1];
        return p2[p2.size()-1];
    }
};
